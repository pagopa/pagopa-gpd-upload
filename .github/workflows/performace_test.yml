name: Performance Tests

on:
  schedule:
    - cron: '00 08 25 * *'

  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the Environment
        options:
          - dev
          - uat
      type:
        required: true
        type: choice
        description: Select the test type
        options:
          - smoke
          - constant
      canary:
        description: 'run the tests on canary version'
        required: false
        type: boolean
        default: false
      notify:
        required: false
        type: boolean
        description: 'send the slack notification'
        default: true


permissions:
  id-token: write
  contents: read
  deployments: write


jobs:
  performance_test:
    name: Test ${{(github.event.inputs == null && 'dev') || inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{(github.event.inputs == null && 'dev') || inputs.environment }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@1f9a0c22da41e6ebfa534300ef656657ea2c6707

      - name: Login
        id: login
        # from https://github.com/Azure/login/commits/master
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          client-id: ${{ secrets.CD_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Prepare performance data
        shell: bash
        run: |
          cd ./performance-test
          chmod +x ./prepare_performance_data.sh
          ./prepare_performance_data.sh

      - name: Run k6 local test
        uses: grafana/k6-action@v0.3.1
        with:
          filename: performance-test/src/main_scenario.js
          flags: --env VARS=environments/${{inputs.environment}}.environment.json --env TEST_TYPE=./test-types/${{inputs.type}}.json
        env:
          API_SUBSCRIPTION_KEY: ${{ secrets.SUBKEY }}

  delete_github_deployments:
    runs-on: ubuntu-latest
    needs: performance_test
    if: ${{ always() }}
    steps:
      - name: Delete Previous deployments
        uses: actions/github-script@v6
        env:
          SHA_HEAD: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.sha) || github.sha}}
        with:
          script: |
            const { SHA_HEAD } = process.env

            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: SHA_HEAD
            });
            await Promise.all(
              deployments.data.map(async (deployment) => {
                await github.rest.repos.createDeploymentStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id,
                  state: 'inactive'
                });
                return github.rest.repos.deleteDeployment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id
                });
              })
            );
